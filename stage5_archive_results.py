# -*- coding: utf-8 -*-
"""
Stage 5: Archive Results by Renaming and Moving

This script performs the final archiving stage of the data synchronization process.
It locates the output directory for the specified document source generated by
previous stages, renames it with a timestamp, and moves it into a designated
archive folder on the NAS.

Workflow:
1.  Initialize SMB client.
2.  Define NAS paths for the source directory and the target archive directory.
3.  Ensure the target archive directory exists.
4.  Generate a timestamp.
5.  Construct the new timestamped name for the source directory.
6.  Construct the final destination path within the archive directory.
7.  Use smbclient.rename() to move and rename the source directory to its final
    archived location.
"""

import os
import sys
import smbclient
from datetime import datetime

# ==============================================================================
# --- Configuration ---
# ==============================================================================

# --- NAS Configuration (Should match previous stages or be loaded) ---
# IMPORTANT: Replace placeholder values if not loaded from a shared config.
NAS_PARAMS = {
    "ip": "your_nas_ip",          # Replace with NAS IP address
    "share": "your_share_name",   # Replace with NAS share name
    "user": "your_nas_user",      # Replace with NAS username
    "password": "your_nas_password" # Replace with NAS password
}
# Base path on the NAS share where Stage 1-4 output files were stored.
NAS_OUTPUT_FOLDER_PATH = "path/to/your/output_folder" # From previous stages

# --- Processing Configuration ---
# Define the specific document source processed in previous stages.
DOCUMENT_SOURCE = 'internal_esg' # From previous stages
ARCHIVE_SUBFOLDER_NAME = '_archive' # Name of the subfolder for archives

# ==============================================================================
# --- Helper Functions ---
# ==============================================================================

def initialize_smb_client():
    """Sets up smbclient credentials."""
    try:
        smbclient.ClientConfig(username=NAS_PARAMS["user"], password=NAS_PARAMS["password"])
        print("SMB client configured successfully.")
        return True
    except Exception as e:
        print(f"[ERROR] Failed to configure SMB client: {e}")
        return False

def create_nas_directory(smb_dir_path):
    """Creates a directory on the NAS if it doesn't exist."""
    try:
        if not smbclient.path.exists(smb_dir_path):
            print(f"   Creating NAS directory: {smb_dir_path}")
            smbclient.makedirs(smb_dir_path, exist_ok=True)
            print(f"   Successfully created directory.")
        else:
            # print(f"   NAS directory already exists: {smb_dir_path}") # Optional: reduce verbosity
            pass
        return True
    except smbclient.SambaClientError as e:
        print(f"   [ERROR] SMB Error creating/accessing directory '{smb_dir_path}': {e}")
        return False
    except Exception as e:
        print(f"   [ERROR] Unexpected error creating/accessing NAS directory '{smb_dir_path}': {e}")
        return False

# ==============================================================================
# --- Main Execution Logic ---
# ==============================================================================

if __name__ == "__main__":
    print("\n" + "="*60)
    print(f"--- Running Stage 5: Archive Results ---")
    print(f"--- Document Source: {DOCUMENT_SOURCE} ---")
    print("="*60 + "\n")

    # --- Initialize SMB Client ---
    print("[1] Initializing SMB Client...")
    if not initialize_smb_client():
        sys.exit(1)
    print("-" * 60)

    # --- Define NAS Paths ---
    print("[2] Defining NAS Paths...")
    # Original source directory containing results
    source_dir_relative = os.path.join(NAS_OUTPUT_FOLDER_PATH, DOCUMENT_SOURCE).replace('\\', '/')
    source_dir_smb = f"//{NAS_PARAMS['ip']}/{NAS_PARAMS['share']}/{source_dir_relative}"

    # Target archive base directory
    archive_base_dir_relative = os.path.join(NAS_OUTPUT_FOLDER_PATH, ARCHIVE_SUBFOLDER_NAME).replace('\\', '/')
    archive_base_dir_smb = f"//{NAS_PARAMS['ip']}/{NAS_PARAMS['share']}/{archive_base_dir_relative}"

    # Construct the new timestamped name and final destination path
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    new_folder_name = f"{DOCUMENT_SOURCE}_{timestamp}"
    destination_dir_smb = os.path.join(archive_base_dir_smb, new_folder_name).replace('\\', '/')

    print(f"   Source Directory (SMB): {source_dir_smb}")
    print(f"   Target Archive Directory (SMB): {archive_base_dir_smb}")
    print(f"   Final Destination Path (SMB): {destination_dir_smb}")
    print("-" * 60)

    # --- Ensure Archive Directory Exists ---
    print(f"[3] Ensuring Target Archive Directory Exists on NAS: {archive_base_dir_smb}")
    if not create_nas_directory(archive_base_dir_smb):
        print(f"[CRITICAL ERROR] Failed to create or access target archive directory. Exiting.")
        sys.exit(1)
    print("-" * 60)

    # --- Check if Source Directory Exists ---
    print(f"[4] Checking if Source Directory Exists: {source_dir_smb}")
    source_exists = False
    try:
        source_exists = smbclient.path.exists(source_dir_smb)
        if not source_exists:
             print(f"   Source directory not found. Nothing to archive.")
             print("\n" + "="*60)
             print(f"--- Stage 5 Completed (Source directory not found) ---")
             print("="*60 + "\n")
             sys.exit(0) # Exit cleanly, nothing to do
        elif not smbclient.path.isdir(source_dir_smb):
             print(f"   [CRITICAL ERROR] Source path exists but is not a directory: {source_dir_smb}. Exiting.")
             sys.exit(1)
        else:
             print(f"   Source directory found.")
    except Exception as e:
        print(f"   [CRITICAL ERROR] Error checking source directory existence: {e}. Exiting.")
        sys.exit(1)
    print("-" * 60)

    # --- Rename and Move Directory on NAS ---
    print(f"[5] Moving and Renaming Source Directory to Archive...")
    print(f"   From: {source_dir_smb}")
    print(f"   To:   {destination_dir_smb}")
    try:
        smbclient.rename(source_dir_smb, destination_dir_smb)
        print(f"   Successfully moved and renamed directory on NAS.")
    except smbclient.SambaClientError as e:
        print(f"   [CRITICAL ERROR] SMB Error moving/renaming directory: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"   [CRITICAL ERROR] Unexpected error moving/renaming directory: {e}")
        sys.exit(1)
    print("-" * 60)

    print("\n" + "="*60)
    print(f"--- Stage 5 Completed Successfully ---")
    print(f"--- Results moved to: {destination_dir_smb} ---")
    print("="*60 + "\n")
